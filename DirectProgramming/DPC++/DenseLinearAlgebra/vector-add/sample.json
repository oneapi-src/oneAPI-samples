{
  "guid":"b1b58be7-e22e-4ca2-ba59-6887b2f1be6c",
  "name": "Base: Vector Add",
  "categories": ["Toolkit/Get Started", "Toolkit/oneAPI Direct Programming/DPC++/Dense Linear Algebra", "Toolkit/oneAPI Tools/Advisor"],
  "description": "This simple sample adds two large vectors in parallel. Provides a ‘Hello World!’ like sample to ensure your environment is setup correctly using simple Intel® oneAPI Data Parallel C++ (DPC++)",
  "toolchain": ["dpcpp"],
  "languages": [{"cpp": {"properties": {"projectOptions": [{"projectType": "makefile"}]}}}],
  "targetDevice": ["CPU", "GPU", "FPGA"],
  "os": ["linux", "windows"],
  "builder": ["ide", "make"],
  "ciTests": {
    "linux": [
      {
        "id": "buffer_default",
        "steps": [
          "make all",
          "make run",
          "make clean"
        ]
      },
      {
        "id": "buffer_cpu",
        "env": [
          "export SYCL_DEVICE_TYPE=CPU"
        ],
        "steps": [
          "make all",
          "make run",
          "make clean"
        ]
      },
      {
        "id": "buffer_gpu",
        "env": [
          "export SYCL_DEVICE_TYPE=GPU"
        ],
        "steps": [
          "make all",
          "make run",
          "make clean"
        ]
      },
      {
        "id": "buffer_host",
        "env": [
          "export SYCL_DEVICE_TYPE=HOST"
        ],
        "steps": [
          "make all",
          "make run",
          "make clean"
        ]
      },
      {
        "id": "usm_default",
        "steps": [
          "make build_usm",
          "make run_usm",
          "make clean"
        ]
      },
      {
        "id": "usm_cpu",
        "env": [
          "export SYCL_DEVICE_TYPE=CPU"
        ],
        "steps": [
          "make build_usm",
          "make run_usm",
          "make clean"
        ]
      },
      {
        "id": "usm_gpu",
        "env": [
          "export SYCL_DEVICE_TYPE=GPU"
        ],
        "steps": [
          "make build_usm",
          "make run_usm",
          "make clean"
        ]
      },
      {
        "id": "usm_host",
        "env": [
          "export SYCL_DEVICE_TYPE=HOST"
        ],
        "steps": [
          "make build_usm",
          "make run_usm",
          "make clean"
        ]
      },
      {
        "id": "fpga_emu_buffers",
        "steps": [
          "make fpga_emu -f Makefile.fpga",
          "make run_emu -f Makefile.fpga",
          "make clean -f Makefile.fpga"
        ]
      },
      {
        "id": "fpga_emu_usm",
        "steps": [
          "make fpga_emu_usm -f Makefile.fpga",
          "make run_emu_usm -f Makefile.fpga",
          "make clean -f Makefile.fpga"
        ]
      },
      {
        "id": "fpga_report_buffers",
        "steps": [
          "make report -f Makefile.fpga",
          "make clean -f Makefile.fpga"
        ]
      },
      {
        "id": "fpga_report_usm",
        "steps": [
          "make report_usm -f Makefile.fpga",
          "make clean -f Makefile.fpga"
        ]
      }
    ],
    "windows": [
      {
        "id": "buffer_default",
        "steps": [
          "nmake -f Makefile.win",
          "nmake -f Makefile.win run",
          "nmake -f Makefile.win clean"
        ]
      },
      {
        "id": "buffer_cpu",
        "env": [
          "set SYCL_DEVICE_TYPE=CPU"
        ],
        "steps": [
          "nmake -f Makefile.win",
          "nmake -f Makefile.win run",
          "nmake -f Makefile.win clean"
        ]
      },
      {
        "id": "buffer_gpu",
        "env": [
          "set SYCL_DEVICE_TYPE=GPU"
        ],
        "steps": [
          "nmake -f Makefile.win",
          "nmake -f Makefile.win run",
          "nmake -f Makefile.win clean"
        ]
      },
      {
        "id": "buffer_host",
        "env": [
          "set SYCL_DEVICE_TYPE=HOST"
        ],
        "steps": [
          "nmake -f Makefile.win",
          "nmake -f Makefile.win run",
          "nmake -f Makefile.win clean"
        ]
      },
      {
        "id": "usm_default",
        "steps": [
          "nmake -f Makefile.win build_usm",
          "nmake -f Makefile.win run_usm",
          "nmake -f Makefile.win clean"
        ]
      },
      {
        "id": "usm_cpu",
        "env": [
          "set SYCL_DEVICE_TYPE=CPU"
        ],
        "steps": [
          "nmake -f Makefile.win build_usm",
          "nmake -f Makefile.win run_usm",
          "nmake -f Makefile.win clean"
        ]
      },
      {
        "id": "usm_gpu",
        "env": [
          "set SYCL_DEVICE_TYPE=GPU"
        ],
        "steps": [
          "nmake -f Makefile.win build_usm",
          "nmake -f Makefile.win run_usm",
          "nmake -f Makefile.win clean"
        ]
      },
      {
        "id": "usm_host",
        "env": [
          "set SYCL_DEVICE_TYPE=HOST"
        ],
        "steps": [
          "nmake -f Makefile.win build_usm",
          "nmake -f Makefile.win run_usm",
          "nmake -f Makefile.win clean"
        ]
      },
      {
        "id": "fpga_emu_buffers",
        "steps": [
          "nmake -f Makefile.win.fpga",
          "nmake -f Makefile.win.fpga run",
          "nmake -f Makefile.win.fpga clean"
        ]
      },
      {
        "id": "fpga_emu_usm",
        "steps": [
          "nmake -f Makefile.win.fpga fpga_emu_usm",
          "nmake -f Makefile.win.fpga run_usm",
          "nmake -f Makefile.win.fpga clean"
        ]
      }
    ]
  }
}
