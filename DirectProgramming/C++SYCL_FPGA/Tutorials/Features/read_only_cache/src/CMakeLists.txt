set(SOURCE_FILE read_only_cache.cpp)
set(TARGET_NAME read_only_cache)
set(EMULATOR_TARGET ${TARGET_NAME}.fpga_emu)
set(SIMULATOR_TARGET ${TARGET_NAME}.fpga_sim)
set(FPGA_TARGET_CACHE_DISABLED ${TARGET_NAME}_disabled.fpga)
set(FPGA_TARGET_CACHE_ENABLED ${TARGET_NAME}_enabled.fpga)

# FPGA board selection
if(NOT DEFINED FPGA_DEVICE)
    set(FPGA_DEVICE "Agilex7")
    message(STATUS "FPGA_DEVICE was not specified.\
                    \nConfiguring the design to the default FPGA family: ${FPGA_DEVICE}\
                    \nPlease refer to the README for information on target selection.")
else()
    message(STATUS "Configuring the design with the following target: ${FPGA_DEVICE}")
endif()

# This is a Windows-specific flag that enables exception handling in host code
if(WIN32)
    set(WIN_FLAG "/EHsc")
endif()

set(SEED "-Xsseed=2")

if(IGNORE_DEFAULT_SEED)
    set(SEED "")
endif()

message(STATUS "SEED=${SEED}")

# A SYCL ahead-of-time (AoT) compile processes the device code in two stages.
# 1. The "compile" stage compiles the device code to an intermediate representation (SPIR-V).
# 2. The "link" stage invokes the compiler's FPGA backend before linking.
#    For this reason, FPGA backend flags must be passed as link flags in CMake.
set(EMULATOR_COMPILE_FLAGS "-fsycl -fintelfpga -Wall ${WIN_FLAG} -DFPGA_EMULATOR")
set(EMULATOR_LINK_FLAGS "-fsycl -fintelfpga")
set(SIMULATOR_COMPILE_FLAGS "-fsycl -fintelfpga -Wall ${WIN_FLAG} -Xssimulation -DFPGA_SIMULATOR")
set(SIMULATOR_LINK_FLAGS "-fsycl -fintelfpga -Xssimulation -Xstarget=${FPGA_DEVICE} ${USER_HARDWARE_FLAGS}")
set(HARDWARE_COMPILE_FLAGS "-fsycl -fintelfpga -Wall ${WIN_FLAG} -DFPGA_HARDWARE ${SEED}")
set(HARDWARE_LINK_FLAGS "-fsycl -fintelfpga -Xshardware -Xstarget=${FPGA_DEVICE} ${USER_HARDWARE_FLAGS}")
# use cmake -D USER_HARDWARE_FLAGS=<flags> to set extra flags for FPGA backend compilation

###############################################################################
### FPGA Emulator
###############################################################################
# To compile in a single command:
#    icpx -fsycl -fintelfpga -DFPGA_EMULATOR read_only_cache.cpp -o read_only_cache.fpga_emu
# CMake executes:
#    [compile] icpx -fsycl -fintelfpga -DFPGA_EMULATOR -o read_only_cache.cpp.o -c read_only_cache.cpp
#    [link]    icpx -fsycl -fintelfpga read_only_cache.cpp.o -o read_only_cache.fpga_emu
add_executable(${EMULATOR_TARGET} ${SOURCE_FILE})
target_include_directories(${EMULATOR_TARGET} PRIVATE ../../../../include)
set_target_properties(${EMULATOR_TARGET} PROPERTIES COMPILE_FLAGS "${EMULATOR_COMPILE_FLAGS}")
set_target_properties(${EMULATOR_TARGET} PROPERTIES LINK_FLAGS "${EMULATOR_LINK_FLAGS}")
add_custom_target(fpga_emu DEPENDS ${EMULATOR_TARGET})

###############################################################################
### Generate Report
###############################################################################
# To compile manually:
#   icpx -fsycl -fintelfpga -Xshardware -Xstarget=<FPGA_DEVICE> -fsycl-link=early read_only_cache.cpp -o read_only_cache_report.a
set(FPGA_EARLY_IMAGE_CACHE_DISABLED ${TARGET_NAME}_disabled_report.a)
set(FPGA_EARLY_IMAGE_CACHE_ENABLED ${TARGET_NAME}_enabled_report.a)
# The compile output is not an executable, but an intermediate compilation result unique to SYCL.
add_executable(${FPGA_EARLY_IMAGE_CACHE_DISABLED} ${SOURCE_FILE})
target_include_directories(${FPGA_EARLY_IMAGE_CACHE_DISABLED} PRIVATE ../../../../include)
add_executable(${FPGA_EARLY_IMAGE_CACHE_ENABLED} ${SOURCE_FILE})
target_include_directories(${FPGA_EARLY_IMAGE_CACHE_ENABLED} PRIVATE ../../../../include)
add_custom_target(report DEPENDS ${FPGA_EARLY_IMAGE_CACHE_DISABLED} ${FPGA_EARLY_IMAGE_CACHE_ENABLED})
set_target_properties(${FPGA_EARLY_IMAGE_CACHE_DISABLED} PROPERTIES COMPILE_FLAGS "${HARDWARE_COMPILE_FLAGS}")
set_target_properties(${FPGA_EARLY_IMAGE_CACHE_DISABLED} PROPERTIES LINK_FLAGS "${HARDWARE_LINK_FLAGS} -fsycl-link=early")

set_target_properties(${FPGA_EARLY_IMAGE_CACHE_ENABLED} PROPERTIES COMPILE_FLAGS "${HARDWARE_COMPILE_FLAGS} -DCACHE_ENABLED")
set_target_properties(${FPGA_EARLY_IMAGE_CACHE_ENABLED} PROPERTIES LINK_FLAGS "${HARDWARE_LINK_FLAGS} -Xsread-only-cache-size=2048 -fsycl-link=early")
# fsycl-link=early stops the compiler after RTL generation, before invoking QuartusÂ®

###############################################################################
### FPGA Simulator
###############################################################################
# To compile in a single command:
#   icpx -fsycl -fintelfpga -Xssimulation -DFPGA_SIMULATOR -Xstarget=<FPGA_DEVICE> read_only_cache.cpp -o read_only_cache.fpga
# CMake executes:
#   [compile] icpx -fsycl -fintelfpga -Xssimulation -DFPGA_SIMULATOR -o read_only_cache.cpp.o -c read_only_cache.cpp
#   [link]    icpx -fsycl -fintelfpga -Xssimulation -Xstarget=<FPGA_DEVICE> read_only_cache.cpp.o -o read_only_cache.fpga
add_executable(${SIMULATOR_TARGET} EXCLUDE_FROM_ALL ${SOURCE_FILE})
target_include_directories(${SIMULATOR_TARGET} PRIVATE ../../../../include)
add_custom_target(fpga_sim DEPENDS ${SIMULATOR_TARGET})
set_target_properties(${SIMULATOR_TARGET} PROPERTIES COMPILE_FLAGS "${SIMULATOR_COMPILE_FLAGS}")
set_target_properties(${SIMULATOR_TARGET} PROPERTIES LINK_FLAGS "${SIMULATOR_LINK_FLAGS}")

###############################################################################
### FPGA Hardware
###############################################################################
# To compile in a single command:
#   icpx -fsycl -fintelfpga -Xshardware -Xstarget=<FPGA_DEVICE> read_only_cache.cpp -o read_only_cache.fpga
# CMake executes:
#   [compile] icpx -fsycl -fintelfpga -o read_only_cache.cpp.o -c read_only_cache.cpp
#   [link]    icpx -fsycl -fintelfpga -Xshardware -Xstarget=<FPGA_DEVICE> read_only_cache.cpp.o -o read_only_cache.fpga
add_executable(${FPGA_TARGET_CACHE_DISABLED} EXCLUDE_FROM_ALL ${SOURCE_FILE})
target_include_directories(${FPGA_TARGET_CACHE_DISABLED} PRIVATE ../../../../include)
add_executable(${FPGA_TARGET_CACHE_ENABLED} EXCLUDE_FROM_ALL ${SOURCE_FILE})
target_include_directories(${FPGA_TARGET_CACHE_ENABLED} PRIVATE ../../../../include)
add_custom_target(fpga DEPENDS ${FPGA_TARGET_CACHE_DISABLED} ${FPGA_TARGET_CACHE_ENABLED})
set_target_properties(${FPGA_TARGET_CACHE_DISABLED} PROPERTIES COMPILE_FLAGS "${HARDWARE_COMPILE_FLAGS}")
set_target_properties(${FPGA_TARGET_CACHE_DISABLED} PROPERTIES LINK_FLAGS "${HARDWARE_LINK_FLAGS} -reuse-exe=${CMAKE_BINARY_DIR}/${FPGA_TARGET_CACHE_DISABLED}")
# The -reuse-exe flag enables rapid recompilation of host-only code changes.
# See C++SYCL_FPGA/GettingStarted/fast_recompile for details.
set_target_properties(${FPGA_TARGET_CACHE_ENABLED} PROPERTIES COMPILE_FLAGS "${HARDWARE_COMPILE_FLAGS} -DCACHE_ENABLED")
set_target_properties(${FPGA_TARGET_CACHE_ENABLED} PROPERTIES LINK_FLAGS "${HARDWARE_LINK_FLAGS} -Xsread-only-cache-size=2048 -reuse-exe=${CMAKE_BINARY_DIR}/${FPGA_TARGET_CACHE_ENABLED}")
