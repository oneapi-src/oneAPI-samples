cmake_minimum_required(VERSION 3.21 FATAL_ERROR)
option(BUILD_FORTRAN_EXAMPLES "Whether to build fortran examples" ON)
set(CMAKE_C_COMPILER icx)
set(CMAKE_CXX_COMPILER icpx)
set(_languages C CXX)

if (BUILD_FORTRAN_EXAMPLES)
  set(_languages ${_languages} Fortran)
  set(CMAKE_Fortran_COMPILER ifx)
endif()

enable_testing()

project(GPUOptGuide
  LANGUAGES ${_languages}
  DESCRIPTION "Examples from oneAPI GPU Optimization Guide")

set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)

find_package(IntelSYCL REQUIRED)

if (BUILD_FOTRAN_EXAMPLES)
  check_language(Fortran)
  if(CMAKE_Fortran_COMPILER)
    enable_language(Fortran)
  else()
    message(FATAL_ERROR "No Fortran support detected, but Fortran tests were requested. Install oneAPI HPC Toolkit.")
  endif()
endif()

set(MKL_THREADING tbb_thread)
set(MKL_INTERFACE "ilp64")
set(DPCPP_COMPILER ON)
find_package(MKL REQUIRED)

string(CONCAT WARNING_CXX_FLAGS_STR
  "-Wall "
  "-Wextra "
  "-Winit-self "
  "-Wunused-function "
  "-Wuninitialized "
  "-Wmissing-declarations "
  "-fdiagnostics-color=auto "
)
string(REPLACE " " ";" COMMON_CXX_FLAGS "${WARNING_CXX_FLAGS_STR}")

function(add_example_with_mkl name)
  cmake_parse_arguments(FUNC_SRC "" "" "SOURCES" ${ARGN})
  if (FUNC_SRC_SOURCES)
    set(_src ${FUNC_SRC_SOURCES})
  else()
    set(_src ${name}.cpp)
  endif()
  add_executable(${name} ${_src})
  add_sycl_to_target(TARGET ${name} SOURCES ${_src})
  target_compile_options(${name} PRIVATE ${COMMON_CXX_FLAGS})
  target_compile_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64 -qmkl)
  target_link_libraries(${name} PRIVATE MKL::MKL_DPCPP)
  target_link_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64 -qmkl -lOpenCL)
  add_test(NAME ${name} COMMAND ${name} ${ARGN})
endfunction(add_example_with_mkl)

function(add_fortran_example_with_mkl name)
  if(CMAKE_Fortran_COMPILER)
    set(_src ${name}.f)
    add_executable(${name} ${_src})
    add_sycl_to_target(TARGET ${name} SOURCES ${_src})
    target_compile_options(${name} PRIVATE -warn all)
    target_compile_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64 -qmkl -fpp -free)
    set_target_properties(${name} PROPERTIES LINKER_LANGUAGE Fortran)
    target_link_libraries(${name} PUBLIC MKL::MKL_DPCPP)
    target_link_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64 -qmkl -lOpenCL)
    add_test(NAME ${name} COMMAND ${name} ${ARGN})
  endif()
endfunction(add_fortran_example_with_mkl)

function(add_fortran_example_with_mkl_i8 name)
  if(CMAKE_Fortran_COMPILER)
    set(_src ${name}.f)
    add_executable(${name} ${_src})
    add_sycl_to_target(TARGET ${name} SOURCES ${_src})
    target_compile_options(${name} PRIVATE -warn all)
    target_compile_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64 -qmkl -fpp -free -DMKL_ILP64 -i8)
    set_target_properties(${name} PROPERTIES LINKER_LANGUAGE Fortran)
    target_link_libraries(${name} PUBLIC MKL::MKL_DPCPP)
    target_link_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64 -qmkl -lOpenCL)
    add_test(NAME ${name} COMMAND ${name} ${ARGN})
  endif()
endfunction(add_fortran_example_with_mkl_i8)

function(add_example name)
  cmake_parse_arguments(FUNC_SRC "" "" "SOURCES" ${ARGN})
  if (FUNC_SRC_SOURCES)
    set(_src ${FUNC_SRC_SOURCES})
  else()
    set(_src ${name}.cpp)
  endif()
  add_executable(${name} ${_src})
  add_sycl_to_target(TARGET ${name} SOURCES ${_src})
  target_compile_options(${name} PRIVATE ${COMMON_CXX_FLAGS})
  target_link_options(${name} PRIVATE -fsycl-device-code-split=per_kernel)
  add_test(NAME ${name} COMMAND ${name} ${ARGN})
endfunction(add_example)

function(add_openmp_example name)
  set(_src ${name}.cpp)
  add_executable(${name} ${_src})
  add_sycl_to_target(TARGET ${name} SOURCES ${_src})
  target_compile_options(${name} PRIVATE ${COMMON_CXX_FLAGS})
  add_test(NAME ${name} COMMAND ${name} ${ARGN})
endfunction(add_openmp_example)

function(add_fortran_example name)
  if(CMAKE_Fortran_COMPILER)
    set(_src ${name}.f90)
    add_executable(${name} ${_src})
    add_sycl_to_target(TARGET ${name} SOURCES ${_src})
    target_compile_options(${name} PRIVATE -warn all)
    target_compile_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64)
    set_target_properties(${name} PROPERTIES LINKER_LANGUAGE Fortran)
    target_link_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64)
    add_test(NAME ${name} COMMAND ${name} ${ARGN})
  endif()
endfunction(add_fortran_example)

function(add_fixed_fortran_example name)
  if(CMAKE_Fortran_COMPILER)
    set(_src ${name}.f)
    add_executable(${name} ${_src})
    add_sycl_to_target(TARGET ${name} SOURCES ${_src})
    target_compile_options(${name} PRIVATE -warn all)
    target_compile_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64)
    set_target_properties(${name} PROPERTIES LINKER_LANGUAGE Fortran)
    add_test(NAME ${name} COMMAND ${name} ${ARGN})
  endif()
endfunction(add_fixed_fortran_example)

function(add_mpi_example name)
  if(MPI_FOUND)
    set(_src ${name}.cpp)
    add_executable(${name} ${_src})
    add_sycl_to_target(TARGET ${name} SOURCES ${_src})
    target_compile_options(${name} PRIVATE -O3 -fiopenmp -fopenmp-targets=spir64)
    target_link_options(${name} PRIVATE -O3 -fiopenmp -fopenmp-targets=spir64)
    target_link_libraries(${name} PRIVATE MPI::MPI_CXX)
    add_test(NAME ${name} COMMAND ${name} ${ARGN})
  endif()
endfunction(add_mpi_example)

function(add_example_with_mkl_mpi name)
  if(MPI_FOUND)
    set(_src ${name}.cpp)
    add_executable(${name} ${_src})
    add_sycl_to_target(TARGET ${name} SOURCES ${_src})
    target_compile_options(${name} PRIVATE ${COMMON_CXX_FLAGS})
    if(NOT MKL_ROOT)
      set(MKL_ROOT $ENV{MKLROOT} CACHE PATH "Folder contains MKL")
    endif(NOT MKL_ROOT)
    target_compile_options(${name} PRIVATE -fiopenmp -fopenmp-targets=spir64 -fsycl -DMKL_LP64  -I"${MKLROOT}/include")
    target_link_options(${name} PRIVATE  -fiopenmp -fopenmp-targets=spir64 -fsycl  -L${MKLROOT}/lib -lmkl_sycl_blas -lmkl_intel_ilp64 -lmkl_tbb_thread -lmkl_core -lsycl -lpthread -lm -ldl)
    target_link_libraries(${name} PRIVATE MPI::MPI_CXX)
    add_test(NAME ${name} COMMAND ${name} ${ARGN})
  endif()
endfunction(add_example_with_mkl_mpi)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

add_subdirectory(atomics)
add_subdirectory(buffer-accessors)
add_subdirectory(buffers)
add_subdirectory(composite-explicit-scaling)
add_subdirectory(composite-implicit-scaling)
add_subdirectory(conditionals)
add_subdirectory(exec-model)
add_subdirectory(flat)
add_subdirectory(fp-computations)
add_subdirectory(grf-mode-selection)
add_subdirectory(host-device-memory)
add_subdirectory(io-kernel)
add_subdirectory(jitting)
add_subdirectory(joint-matrix)
add_subdirectory(kernels)
add_subdirectory(libraries-fcorr)
add_subdirectory(libraries-kernel)
add_subdirectory(libraries-stdlib)
add_subdirectory(local-global-sync)
add_subdirectory(matrix)
add_subdirectory(memory-movement)
add_subdirectory(MPI)
add_subdirectory(multiple-devices)
add_subdirectory(multiple-kernel-execution)
add_subdirectory(multiple-queue-submission)
add_subdirectory(onemkl-scaling)
add_subdirectory(OpenMP)
add_subdirectory(optimize-data-transfers)
add_subdirectory(overlap-data-transfers)
add_subdirectory(porting-registers)
add_subdirectory(prefetch)
add_subdirectory(reduction)
add_subdirectory(redundant-queues)
add_subdirectory(registers)
add_subdirectory(restrict)
add_subdirectory(slm)
add_subdirectory(sub-group)
add_subdirectory(usm)
add_subdirectory(work-group-size)
